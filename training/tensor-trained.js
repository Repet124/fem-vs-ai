module.exports = function anonymous(rawInput
) {

  var input = rawInput;
  var json = {"type":"LSTMTimeStep","options":{"inputSize":5,"inputRange":0,"hiddenLayers":[10],"outputSize":5,"decayRate":0.999,"smoothEps":1e-8,"regc":0.000001,"clipval":5,"maxPredictionLength":100,"dataFormatter":{"indexTable":{},"characterTable":{},"characters":[],"specialIndexes":[]},"log":true,"logPeriod":10},"hiddenLayers":[{"inputMatrix":{"rows":10,"columns":5,"weights":[-0.44285598397254944,-0.3748791217803955,-0.020301859825849533,-0.027117790654301643,-0.3241421580314636,-0.4329003393650055,-0.46720653772354126,0.007711159996688366,-0.23752664029598236,-0.40259960293769836,0.4039131999015808,0.3976936638355255,0.37688788771629333,0.44080856442451477,0.3865719437599182,-0.447179913520813,-0.44265833497047424,-0.0866381973028183,-0.38743019104003906,-0.09609818458557129,0.392969012260437,-0.2778303027153015,-0.03780391439795494,-0.3665817081928253,0.006381411571055651,-0.46324586868286133,0.01161270122975111,0.37356889247894287,0.41216230392456055,0.3675723373889923,-0.02733253873884678,-0.03490801900625229,0.008533899672329426,0.030544696375727654,0.035558365285396576,0.3729250431060791,0.39876917004585266,-0.050357621163129807,0.4516514837741852,0.2851516306400299,0.12755614519119263,0.4082848131656647,-0.38714760541915894,0.37562820315361023,-0.02315676026046276,-0.39375001192092896,-0.399728000164032,-0.09962131083011627,-0.43201568722724915,-0.35042327642440796]},"inputHidden":{"rows":10,"columns":10,"weights":[0.34837061166763306,0.4004310965538025,-0.21736234426498413,-0.42065906524658203,-0.06130613386631012,-0.21279564499855042,-0.03709820285439491,-0.3571706712245941,0.28695717453956604,-0.3984856903553009,-0.2587894797325134,-0.07027333974838257,-0.35467109084129333,0.19677205383777618,-0.273967981338501,0.14733311533927917,-0.04885258898139,-0.3401467502117157,0.4047833979129791,0.3777477741241455,-0.20889531075954437,-0.28710177540779114,0.27086710929870605,0.18147441744804382,0.23900917172431946,0.27564993500709534,0.13513274490833282,0.29186108708381653,-0.2950843572616577,0.15155240893363953,0.12402055412530899,0.31636297702789307,-0.4187769591808319,-0.12424883991479874,-0.3889662027359009,-0.2780405282974243,-0.08611461520195007,-0.32355087995529175,0.352727472782135,-0.06162066012620926,0.2675463855266571,0.27170613408088684,-0.2532345950603485,-0.2730292081832886,-0.1142062172293663,-0.17450743913650513,-0.19797472655773163,-0.29607534408569336,0.22475303709506989,-0.31606629490852356,-0.34920117259025574,-0.37150558829307556,0.38801810145378113,0.4016900360584259,0.09556523710489273,0.1430792659521103,-0.019647039473056793,0.36857396364212036,-0.325903058052063,0.32565075159072876,0.2527082562446594,0.09255620837211609,-0.06951327621936798,-0.188540518283844,-0.15381813049316406,-0.18086501955986023,-0.269590824842453,-0.054024588316679,0.08530367165803909,-0.3815682828426361,-0.3137569725513458,-0.3618277907371521,0.06725520640611649,0.4080073833465576,0.06121253967285156,0.16841326653957367,0.2227453738451004,0.196320042014122,-0.22671283781528473,0.37348809838294983,-0.32903867959976196,-0.39352747797966003,0.14669959247112274,0.4017829895019531,0.09549097716808319,0.10614379495382309,0.12658245861530304,0.3150827884674072,-0.31558534502983093,0.34867358207702637,0.010474340058863163,0.014877044595777988,-0.35037755966186523,-0.04399895295500755,-0.379791259765625,-0.2671681046485901,-0.2596951723098755,-0.2467816025018692,0.3300803303718567,0.00426635192707181]},"inputBias":{"rows":10,"columns":1,"weights":[0.07330600917339325,-0.1746540516614914,0.3025152087211609,0.25003117322921753,-0.013650020584464073,0.2314767837524414,0.07704874873161316,0.24304544925689697,0.3163990080356598,-0.2606123387813568]},"forgetMatrix":{"rows":10,"columns":5,"weights":[-0.37810492515563965,-0.3880292475223541,-0.02423953078687191,-0.45831868052482605,0.0729421004652977,-0.27890267968177795,0.07468985766172409,-0.027941355481743813,0.43416428565979004,0.24836908280849457,0.4715980291366577,0.4179382026195526,0.42078086733818054,0.41592422127723694,0.2573176324367523,-0.3229401707649231,-0.3247166574001312,0.2866252362728119,-0.45006445050239563,-0.05071277916431427,0.40203356742858887,0.4379565715789795,-0.013972731307148933,0.036879390478134155,0.0007067646947689354,0.3845458924770355,0.4366774559020996,0.19647017121315002,0.4315679371356964,0.34653452038764954,0.007186076603829861,-0.40429240465164185,-0.3842802345752716,-0.36655721068382263,-0.3725716471672058,-0.03744762763381004,-0.028934556990861893,0.35770687460899353,0.4269929826259613,0.38246646523475647,0.3817997872829437,0.3668484091758728,0.3669407367706299,0.37537986040115356,-0.016899408772587776,-0.23735949397087097,-0.20126427710056305,-0.23633061349391937,-0.3461945950984955,-0.1763032227754593]},"forgetHidden":{"rows":10,"columns":10,"weights":[0.10812602937221527,0.002177945803850889,-0.2292207032442093,-0.02438035048544407,-0.3875994384288788,-0.3309206962585449,-0.34386497735977173,-0.01674002967774868,0.055390309542417526,-0.057867567986249924,-0.3402005732059479,-0.2752963602542877,-0.0019848027732223272,0.31837230920791626,-0.41225478053092957,-0.2966795265674591,-0.39846450090408325,0.08175116032361984,-0.00651601143181324,0.2937845289707184,-0.07951705157756805,-0.059104129672050476,0.16950729489326477,0.16188140213489532,0.22074000537395477,0.2537126839160919,0.3494197726249695,0.08081185072660446,-0.13437530398368835,0.10168277472257614,-0.0491102859377861,-0.05170905217528343,-0.28133589029312134,0.02576259896159172,-0.39884865283966064,-0.22418098151683807,-0.3481985926628113,-0.06973160803318024,0.28537073731422424,0.14360985159873962,0.23219576478004456,0.24036553502082825,-0.22338731586933136,-0.2847215533256531,-0.19388914108276367,-0.22700636088848114,-0.1665746569633484,-0.1757545918226242,0.2141897827386856,-0.22326110303401947,-0.12716713547706604,-0.07830078899860382,0.18210209906101227,0.16627566516399384,0.2767525911331177,0.26901495456695557,0.2601463496685028,0.1646483838558197,-0.26677143573760986,0.04777335003018379,0.40856829285621643,0.4555296003818512,-0.3857094645500183,-0.3521227538585663,-0.11785370856523514,-0.1609613299369812,-0.004536800552159548,-0.4295910596847534,0.4149971306324005,-0.25597286224365234,-0.3885166049003601,-0.3850460648536682,0.2770884931087494,0.3045719861984253,0.13662803173065186,0.15630348026752472,0.08374610543251038,0.3266270160675049,-0.3201640844345093,0.3284544348716736,-0.22470951080322266,-0.07189467549324036,0.20863015949726105,0.04523998871445656,0.3116685152053833,0.25575947761535645,0.29283061623573303,0.1894066333770752,-0.04422576352953911,0.02458578161895275,-0.09597799181938171,-0.15781955420970917,-0.3312450349330902,0.17876185476779938,-0.3534061014652252,-0.3789828419685364,-0.2824093997478485,-0.13367263972759247,0.21459044516086578,0.14151307940483093]},"forgetBias":{"rows":10,"columns":1,"weights":[0,0,0,0,0,0,0,0,0,0]},"outputMatrix":{"rows":10,"columns":5,"weights":[-0.41073209047317505,-0.42982369661331177,0.04436798393726349,0.012070123106241226,-0.3512786626815796,-0.12290187180042267,-0.42425641417503357,0.024704396724700928,-0.03611963987350464,-0.11274509876966476,0.44794994592666626,0.4068101942539215,0.43393152952194214,0.3446338474750519,0.4320499002933502,-0.41804632544517517,-0.3776346743106842,-0.05844194069504738,-0.4697779417037964,-0.36848825216293335,0.44605955481529236,0.37651219964027405,-0.013044968247413635,-0.4560825526714325,0.04836947098374367,0.40043020248413086,0.4233197271823883,0.4558815658092499,0.3676333427429199,0.46819233894348145,0.008331095799803734,0.0136844702064991,0.012734980322420597,0.008464973419904709,0.021978704258799553,0.3234134614467621,0.4063485264778137,0.020110001787543297,0.2773445248603821,-0.02519342489540577,0.4006529152393341,0.4095141887664795,-0.022661296650767326,0.3210119605064392,0.43347907066345215,-0.3657274842262268,-0.39502832293510437,-0.10291930288076401,-0.4485092759132385,-0.38392019271850586]},"outputHidden":{"rows":10,"columns":10,"weights":[0.2211209237575531,0.15972431004047394,-0.21407149732112885,-0.23865699768066406,-0.15850403904914856,-0.20872867107391357,-0.2386961579322815,-0.1865214705467224,0.10336462408304214,-0.21613486111164093,-0.3751331567764282,-0.384409636259079,0.38934755325317383,0.43628233671188354,-0.39485275745391846,0.1551019847393036,-0.431316614151001,0.1668785959482193,0.023157667368650436,0.3490121066570282,-0.10039271414279938,-0.12650322914123535,0.2369394153356552,0.196851909160614,0.2369808554649353,0.19790059328079224,0.3063278794288635,0.16742417216300964,-0.29370835423469543,0.1227496862411499,-0.008561989292502403,0.01052861288189888,-0.4078504741191864,0.00229104096069932,-0.383568674325943,-0.2094021439552307,-0.24180717766284943,-0.19253988564014435,0.35816049575805664,0.019616659730672836,0.352290540933609,0.34687715768814087,-0.14197300374507904,-0.31913042068481445,-0.10155705362558365,-0.17500193417072296,-0.0850236713886261,-0.28764984011650085,0.2964385151863098,-0.3881530463695526,-0.37249472737312317,-0.3966182768344879,0.37620484828948975,0.297970175743103,0.17592257261276245,0.08612220734357834,0.06232548505067825,0.3922145366668701,-0.39742523431777954,0.32238447666168213,0.41306138038635254,0.4264502227306366,-0.31317058205604553,-0.3714953064918518,-0.08925020694732666,-0.17775636911392212,-0.03819170966744423,-0.394339919090271,0.35141393542289734,-0.3601793646812439,-0.3235558867454529,-0.4526434540748596,0.187344029545784,0.3824494481086731,0.07705935835838318,0.1469990313053131,0.08574454486370087,0.3932211101055145,-0.287258118391037,0.3996007740497589,-0.38977983593940735,-0.3335813283920288,0.08231768012046814,0.3476909101009369,0.05754389241337776,0.15206167101860046,0.20736539363861084,0.27500784397125244,-0.12445142865180969,0.4228203594684601,-0.013154897838830948,-0.012962304055690765,-0.4458368122577667,-0.003586899721994996,-0.3832232654094696,-0.33417174220085144,-0.3387455344200134,-0.14550863206386566,0.37505966424942017,0.07111562043428421]},"outputBias":{"rows":10,"columns":1,"weights":[0.0669308677315712,-0.15707454085350037,0.2898053824901581,0.2485499531030655,0.0027026438619941473,0.1789463460445404,0.09164012968540192,0.24437357485294342,0.3280326724052429,-0.2615974545478821]},"cellActivationMatrix":{"rows":10,"columns":5,"weights":[-0.03412779048085213,-0.004166734870523214,0.44068920612335205,0.028125278651714325,-0.018713166937232018,-0.19170646369457245,-0.16925114393234253,0.4494457244873047,-0.2853614091873169,0.005437679123133421,0.40144026279449463,0.3997848927974701,0.45076364278793335,0.40074121952056885,0.2613895833492279,0.06793071329593658,0.05382625386118889,-0.15762190520763397,0.03750469163060188,0.31988829374313354,0.12561821937561035,0.13787941634655,0.05536838248372078,-0.4378448724746704,0.02943798154592514,0.29990890622138977,0.3110066056251526,0.41154661774635315,0.38831615447998047,0.2474641352891922,0.06934979557991028,0.07751186937093735,-0.020046208053827286,0.07278319448232651,0.08301395177841187,0.30692312121391296,0.36262670159339905,0.4036717712879181,0.40240901708602905,0.18488894402980804,-0.2836528718471527,-0.25048118829727173,0.08260300755500793,-0.29524317383766174,-0.3121863603591919,0.1958778202533722,0.18655428290367126,0.1619938462972641,0.1720324009656906,0.21479137241840363]},"cellActivationHidden":{"rows":10,"columns":10,"weights":[-0.46347710490226746,-0.0472932904958725,-0.006978299003094435,0.38011011481285095,-0.03753598406910896,0.17959079146385193,0.4417097270488739,0.0019779668655246496,-0.003066680859774351,0.42080339789390564,-0.023552991449832916,-0.014948885887861252,0.050035372376441956,0.17673704028129578,0.03738719969987869,0.03835349902510643,0.40523770451545715,-0.017298618331551552,0.04416514188051224,0.19713757932186127,0.02903001569211483,0.04116484895348549,0.16027027368545532,0.0030262263026088476,0.45115700364112854,0.4285733699798584,0.410667359828949,-0.017627783119678497,-0.03200354799628258,-0.08183892071247101,0.4363144636154175,0.44650566577911377,-0.048561662435531616,-0.33070269227027893,0.04322781041264534,-0.10840290784835815,-0.4031893014907837,-0.03731031343340874,-0.010534310713410378,-0.27188464999198914,0.439765065908432,0.3224986791610718,-0.2529332637786865,-0.2986478805541992,0.04548383876681328,-0.003529797773808241,0.008471234701573849,-0.46219122409820557,0.4726763963699341,-0.21328279376029968,-0.006507547106593847,-0.44168075919151306,0.4184374213218689,-0.09725198149681091,0.44685569405555725,0.4417212903499603,-0.03785459324717522,0.4553544521331787,-0.428767591714859,-0.14565078914165497,0.3789319694042206,0.014227820560336113,0.017699185758829117,-0.4207099378108978,-0.020506102591753006,-0.25536584854125977,-0.38543984293937683,-0.03170601651072502,0.030755823478102684,-0.44848793745040894,0.0043604616075754166,0.0384199358522892,0.4180462658405304,-0.027542326599359512,0.4383174479007721,0.38132548332214355,0.33459213376045227,0.07229070365428925,-0.374813050031662,-0.1796140968799591,-0.033082809299230576,-0.005988615099340677,-0.006083930842578411,-0.025435471907258034,-0.2531437873840332,0.10299629718065262,-0.29604703187942505,0.08561358600854874,0.3387881815433502,-0.048657339066267014,0.23604974150657654,0.304104745388031,0.018833570182323456,-0.2224634736776352,0.11112586408853531,0.06646604090929031,-0.22010987997055054,0.07207222282886505,-0.10590682178735733,-0.24460837244987488]},"cellActivationBias":{"rows":10,"columns":1,"weights":[0.09042567014694214,0.29836106300354004,5.569918155670166,-0.17566105723381042,0.207998126745224,-0.007347111124545336,-0.18692542612552643,0.274414986371994,0.1426778882741928,-2.166846752166748]}}],"outputConnector":{"rows":5,"columns":10,"weights":[0.19068512320518494,0.36801260709762573,0.19249209761619568,-0.3463932275772095,-0.17245519161224365,0.20668189227581024,-0.18838165700435638,0.2220204770565033,-0.2210066318511963,-0.26734185218811035,0.43356603384017944,-0.08430197089910507,0.13585539162158966,0.08944540470838547,-0.0325281023979187,0.060999542474746704,-0.3229289650917053,0.012639614753425121,-0.04708963632583618,0.08869313448667526,3.9580154418945312,-1.3823784589767456,-11.09922981262207,-5.214152812957764,2.238180160522461,4.8959174156188965,-3.2483108043670654,-2.7790470123291016,1.4994144439697266,13.203091621398926,-3.2227609157562256,1.863398790359497,5.365942478179932,2.845020294189453,-3.6826374530792236,-2.82086181640625,0.35741376876831055,-1.950868844985962,3.721722364425659,-1.70325767993927,0.017759062349796295,-0.22433695197105408,0.374066025018692,0.014463227242231369,-0.03089289367198944,0.40911218523979187,-0.1552886962890625,0.3429933488368988,-0.004675103817135096,0.06670161336660385]},"output":{"rows":5,"columns":1,"weights":[-0.435343474149704,-0.13795031607151031,8.911951065063477,1.4183032512664795,-0.6889790296554565]},"inputLookup":null,"inputLookupLength":0,"outputLookup":null,"outputLookupLength":0};
  var output = [];
  var states = [];
  var prevStates;
  var state;
  var max = input.length;
  for (var _i = 0; _i < max; _i++) {
    prevStates = states;
    states = [];
    states[0] = {
      name: 'forwardFn',
      left: undefined,
      right: undefined,
      product: new Matrix(5, 1)
    };
    states[1] = {
      name: 'multiply',
      left: json.hiddenLayers[0].inputMatrix,
      right: states[0].product,
      product: new Matrix(10, 1)
    };
    states[2] = {
      name: 'multiply',
      left: json.hiddenLayers[0].inputHidden,
      right: typeof prevStates[25] === 'object' ? prevStates[25].product : new Matrix(10, 1),
      product: new Matrix(10, 1)
    };
    states[3] = {
      name: 'add',
      left: states[1].product,
      right: states[2].product,
      product: new Matrix(10, 1)
    };
    states[4] = {
      name: 'add',
      left: states[3].product,
      right: json.hiddenLayers[0].inputBias,
      product: new Matrix(10, 1)
    };
    states[5] = {
      name: 'sigmoid',
      left: states[4].product,
      right: undefined,
      product: new Matrix(10, 1)
    };
    states[6] = {
      name: 'multiply',
      left: json.hiddenLayers[0].forgetMatrix,
      right: states[0].product,
      product: new Matrix(10, 1)
    };
    states[7] = {
      name: 'multiply',
      left: json.hiddenLayers[0].forgetHidden,
      right: states[2].right,
      product: new Matrix(10, 1)
    };
    states[8] = {
      name: 'add',
      left: states[6].product,
      right: states[7].product,
      product: new Matrix(10, 1)
    };
    states[9] = {
      name: 'add',
      left: states[8].product,
      right: json.hiddenLayers[0].forgetBias,
      product: new Matrix(10, 1)
    };
    states[10] = {
      name: 'sigmoid',
      left: states[9].product,
      right: undefined,
      product: new Matrix(10, 1)
    };
    states[11] = {
      name: 'multiply',
      left: json.hiddenLayers[0].outputMatrix,
      right: states[0].product,
      product: new Matrix(10, 1)
    };
    states[12] = {
      name: 'multiply',
      left: json.hiddenLayers[0].outputHidden,
      right: states[2].right,
      product: new Matrix(10, 1)
    };
    states[13] = {
      name: 'add',
      left: states[11].product,
      right: states[12].product,
      product: new Matrix(10, 1)
    };
    states[14] = {
      name: 'add',
      left: states[13].product,
      right: json.hiddenLayers[0].outputBias,
      product: new Matrix(10, 1)
    };
    states[15] = {
      name: 'sigmoid',
      left: states[14].product,
      right: undefined,
      product: new Matrix(10, 1)
    };
    states[16] = {
      name: 'multiply',
      left: json.hiddenLayers[0].cellActivationMatrix,
      right: states[0].product,
      product: new Matrix(10, 1)
    };
    states[17] = {
      name: 'multiply',
      left: json.hiddenLayers[0].cellActivationHidden,
      right: states[2].right,
      product: new Matrix(10, 1)
    };
    states[18] = {
      name: 'add',
      left: states[16].product,
      right: states[17].product,
      product: new Matrix(10, 1)
    };
    states[19] = {
      name: 'add',
      left: states[18].product,
      right: json.hiddenLayers[0].cellActivationBias,
      product: new Matrix(10, 1)
    };
    states[20] = {
      name: 'tanh',
      left: states[19].product,
      right: undefined,
      product: new Matrix(10, 1)
    };
    states[21] = {
      name: 'multiplyElement',
      left: states[10].product,
      right: states[2].right,
      product: new Matrix(10, 1)
    };
    states[22] = {
      name: 'multiplyElement',
      left: states[5].product,
      right: states[20].product,
      product: new Matrix(10, 1)
    };
    states[23] = {
      name: 'add',
      left: states[21].product,
      right: states[22].product,
      product: new Matrix(10, 1)
    };
    states[24] = {
      name: 'tanh',
      left: states[23].product,
      right: undefined,
      product: new Matrix(10, 1)
    };
    states[25] = {
      name: 'multiplyElement',
      left: states[15].product,
      right: states[24].product,
      product: new Matrix(10, 1)
    };
    states[26] = {
      name: 'multiply',
      left: json.outputConnector,
      right: states[25].product,
      product: new Matrix(5, 1)
    };
    states[27] = {
      name: 'add',
      left: states[26].product,
      right: json.output,
      product: new Matrix(5, 1)
    };
    for (var stateIndex = 0, stateMax = 28; stateIndex < stateMax; stateIndex++) {
      state = states[stateIndex];
      var product = state.product;
      var left = state.left;
      var right = state.right;

      switch (state.name) {
case 'forwardFn':
product.weights = input[_i];
break;
        case 'multiply': //compiled from src/recurrent/matrix/multiply.js
          
            const leftRows = left.rows;
            const leftColumns = left.columns;
            const rightColumns = right.columns;
            // loop over rows of left
            for (let leftRow = 0; leftRow < leftRows; leftRow++) {
                const leftRowBase = leftColumns * leftRow;
                const rightRowBase = rightColumns * leftRow;
                // loop over cols of right
                for (let rightColumn = 0; rightColumn < rightColumns; rightColumn++) {
                    // dot product loop
                    let dot = 0;
                    // loop over columns of left
                    for (let leftColumn = 0; leftColumn < leftColumns; leftColumn++) {
                        const rightColumnBase = rightColumns * leftColumn;
                        const leftIndex = leftRowBase + leftColumn;
                        const rightIndex = rightColumnBase + rightColumn;
                        dot += left.weights[leftIndex] * right.weights[rightIndex];
                        
                        
                    }
                    product.weights[rightRowBase + rightColumn] = dot;
                }
            }
        
          break;
        case 'add': //compiled from src/recurrent/matrix/add.js
          
            for (let i = 0; i < left.weights.length; i++) {
                product.weights[i] = left.weights[i] + right.weights[i];
                
            }
        
          break;
        case 'sigmoid': //compiled from src/recurrent/matrix/sigmoid.js
          
            // sigmoid nonlinearity
            for (let i = 0; i < left.weights.length; i++) {
                product.weights[i] = 1 / (1 + Math.exp(-left.weights[i]));
                
            }
        
          break;
        case 'tanh': //compiled from src/recurrent/matrix/tanh.js
          
            // tanh nonlinearity
            for (let i = 0; i < left.weights.length; i++) {
                product.weights[i] = Math.tanh(left.weights[i]);
                
            }
        
          break;
        case 'multiplyElement': //compiled from src/recurrent/matrix/multiply-element.js
          
            const { weights } = left;
            for (let i = 0; i < weights.length; i++) {
                product.weights[i] = left.weights[i] * right.weights[i];
                
            }
        
          break;
      }
    }
    output = state.product.weights;
  }
  return output;
  
  

  function Matrix(rows, columns) {
    this.rows = rows;
    this.columns = columns;
    this.weights = new Float32Array(rows * columns);
  }
  function softmax(matrix) {
    // probability volume
    const result = new Matrix(matrix.rows, matrix.columns);
    let maxVal = -999999;
    for (let i = 0; i < matrix.weights.length; i++) {
        if (matrix.weights[i] > maxVal) {
            maxVal = matrix.weights[i];
        }
    }
    let s = 0;
    for (let i = 0; i < matrix.weights.length; i++) {
        result.weights[i] = Math.exp(matrix.weights[i] - maxVal);
        s += result.weights[i];
    }
    for (let i = 0; i < matrix.weights.length; i++) {
        result.weights[i] /= s;
    }
    // no backward pass here needed
    // since we will use the computed probabilities outside
    // to set gradients directly on m
    return result;
}
  function randomFloat(min, max) {
    return Math.random() * (max - min) + min;
}
  function sampleI(matrix) {
    // sample argmax from w, assuming w are
    // probabilities that sum to one
    const r = randomFloat(0, 1);
    const w = matrix.weights;
    let x = 0;
    let i = 0;
    while (true) {
        x += w[i];
        if (x > r) {
            return i;
        }
        i++;
    }
}
  function maxI(matrix) {
    // argmax of array w
    const { weights } = matrix;
    let maxv = weights[0];
    let maxix = 0;
    for (let i = 1; i < weights.length; i++) {
        const v = weights[i];
        if (v < maxv)
            continue;
        maxix = i;
        maxv = v;
    }
    return maxix;
}
}